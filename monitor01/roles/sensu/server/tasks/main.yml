---
# Add the following configuration
# api.json -- it configures the sensu-api (server and client)
# redis.json -- it configures the use of redis for sensu as storage
# sensu_check.json -- it configures the oschecks to be executed on the clients
#    sensu_checks.json.j2 is a template with severals templates that can be
#    disabled and configured
- name: Configure sensu
  template:
    src: 'templates/{{ item }}.json.j2'
    dest: '{{sensu_config_path}}/{{ item }}.json'
    owner: '{{ sensu_owner }}'
    group: '{{ sensu_group }}'
  with_items:
    - api
    - redis
    - mailer
    - sensu_checks
    - sensu_handlers
    - sensu_metrics
  notify:
    - restart sensu

# This task is needed due to the fact that all the templates used to
# create sensu_checks.json can be disabled.
# All these templates end with a coma ','
# The last coma ',' needs to be deleted to not let sensu-server crash
- name: Fix sensu_checks
  replace:
    dest: '{{sensu_config_path}}/{{ item }}.json'
    regexp: ",\n +}}"
    replace: "\n    }\n}"
  with_items:
    - 'sensu_checks'
    - 'sensu_handlers'
    - 'sensu_metrics'

- name: Install development tools
  package:
    name: '{{ item }}'
    state: installed
  with_items:
    - 'ruby-devel'
    - 'gcc'
    - 'gcc-c++'

- name: Install mailer handler
  shell: "/opt/sensu/embedded/bin/gem install sensu-plugins-mailer"

- name: Create sensu vhost on rabbitmq
  delegate_to: "{{ item }}"
  rabbitmq_vhost:
    name: '{{ sensu_rabbitmq_vhost }}'
    state: present
  notify:
    - restart rabbitmq
  with_items: "{{ groups.rabbit_hosts }}"

- name: Configure rabbitmq permissions
  delegate_to: "{{ item }}"
  rabbitmq_user:
    user: '{{ sensu_rabbitmq_user }}'
    password: '{{ sensu_rabbitmq_password }}'
    vhost: '{{ sensu_rabbitmq_vhost }}'
    configure_priv: '.*'
    read_priv: '.*'
    write_priv: '.*'
  notify:
    - restart rabbitmq
  with_items: "{{ groups.rabbit_hosts }}"

# This is a workaround for https://github.com/sensu/sensu/issues/1478
- name: Ensure correct ownership on directories
  file:
    path: "{{ item }}"
    state: directory
    owner: sensu
    group: sensu
    recurse: true
  with_items:
    - /var/log/sensu
    - /var/run/sensu
  notify:
    - restart sensu

- name: Ensure sensu is started and enabled at boot
  service:
    name: '{{ item }}'
    state: started
    enabled: yes
  with_items:
    - '{{ sensu_server_service_name }}'
    - '{{ sensu_api_service_name }}'
  when: manage_services|default(false)
